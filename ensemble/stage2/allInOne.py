import os,pickle
import numpy as np
import pandas as pd
import csv
from scipy import stats

# 1.模型的推理npl转npy再转csv
# 每个csv为Index和Value,Index为样本索引,Value为该模型预测的类别
def model_pkl2npy2csv(model_dir = '/media/sdd/robot/wait2ensembleData/inter-testB', save_npy_dir = '/media/sdd/robot/guosai_ensemble/stage2/npy', save_csv_dir = '/media/sdd/robot/guosai_ensemble/stage2/csv'):
    dir=model_dir
    npy_dir=save_npy_dir
    csv_dir=save_csv_dir

    # pkl -> npy
    for root, dirs, files in os.walk(dir):
        for file in files:
            # 检查文件扩展名是否为 .pkl
            if file.endswith('.pkl'):
                all_values = []
                file_path = os.path.join(dir, file)
                output_file=os.path.join(npy_dir, file).replace('.pkl', '.npy')

                print(file_path,output_file)
                
                # 打开并加载 .pkl 文件
                with open(file_path, 'rb') as f:
                    data_dict = pickle.load(f)

                    for it in data_dict:
                        all_values.append(data_dict[it])
                
                np.save(output_file, all_values)


    # npy -> csv
    file_paths = [f for f in os.listdir(npy_dir) if os.path.isfile(os.path.join(npy_dir, f))]

    for file_path in file_paths:
        input_path=os.path.join(npy_dir, file_path)
        output_path=os.path.join(csv_dir, file_path).replace('.npy', '.csv')

        data=np.load(input_path)
        max_idx=np.argmax(data,axis=1)
        df=pd.DataFrame({
            'Index':range(len(max_idx)),
            'Value':max_idx
        })

        df.to_csv(output_path, index=False)

# 2.集成的推理结果文件获得类别csv
# csv为Index和Value,Index为样本索引,Value为集成后预测的类别,可以没有Value
def pred_npy2csv(pred_npy_file = '/media/sdd/robot/guosai_ensemble/stage1/getFinalPredict/pred.npy',output_csv_file = '/media/sdd/robot/guosai_ensemble/stage2/pred.csv'):
    npy_file = pred_npy_file
    csv_output = output_csv_file
    data = np.load(npy_file)
    pred = data.argmax(axis=1)

    results=[]
    indexs=[]
    for i,value in enumerate(pred):
        results.append([i,value])
        indexs.append([i])
        
    with open(csv_output, 'w', newline='') as f:
        writer = csv.writer(f)
        # writer.writerow(['Index', 'Value'])  # 写入表头
        # writer.writerows(results)
        writer.writerow(['Index'])  # 写入表头
        writer.writerows(indexs)

# 3.将集成的预测结果与每个模型的预测结果相结合
# csv为Index、Value已经多个模型的名称,Value为集成预测的结果
def merge_predWithModel(model_csv_dir = '/media/sdd/robot/guosai_ensemble/stage2/csv', pred_csv = "/media/sdd/robot/guosai_ensemble/stage2/pred.csv", output_merge = '/media/sdd/robot/guosai_ensemble/stage2/mergedAllData.csv'):
    directory_path = model_csv_dir
    file_names = [f for f in os.listdir(directory_path) if f.endswith('.csv')]
    file_names.sort()

    base_df = pd.read_csv(pred_csv)

    # 遍历模型文件
    for i, file_name in enumerate(file_names):
        # 读取当前文件
        df = pd.read_csv(os.path.join(directory_path, file_name))
        
        # 检查索引是否一致
        if not base_df['Index'].equals(df['Index']):
            raise ValueError(f"文件 {file_name} 的索引与第一个文件不一致")
        
        column_name = os.path.splitext(file_name)[0]
        base_df[column_name] = df['Value']

    # 保存合并后的DataFrame到新的CSV文件
    output_file_path = output_merge
    base_df.to_csv(output_file_path, index=False)

# 4.选择模糊集,输入集成的预测结果,返回索引列表
def get_vagueSet_index(pred_npy_file = '/media/sdd/robot/guosai_ensemble/stage2/pred.npy'):
    idx_res=[]
    data = np.load(pred_npy_file)
    # todo

    # for i,value in enumerate(data):
    #     max1 = max2 = float('-inf')
    #     for num in value:
    #         if num > max1:
    #             max2 = max1
    #             max1 = num
    #         elif max1 > num > max2:
    #             max2 = num
    #     # 计算差值
    #     difference = max1 - max2
    #     if difference < 0.15 * max1:
    #         idx_res.append(i)

    print(len(idx_res))
    return idx_res
# 5.从合并的csv中找到模糊集,保存成单独的csv
def get_vagueSet_csv(merge_csv = '/media/sdd/robot/guosai_ensemble/stage2/mergedAllData.csv', idx_res = [], output_csv = '/media/sdd/robot/guosai_ensemble/stage2/vagueSet.csv'):
    base_df = pd.read_csv(merge_csv)
    fla_df = base_df[base_df['Index'].isin(idx_res)]
    fla_df.to_csv(output_csv, index=False)

# 6.取众数,完成最后的输出
def get_finalPred(Rate = [], vague_csv = '/media/sdd/robot/guosai_ensemble/stage2/vagueSet.csv', model_npy_dir = '/media/sdd/robot/guosai_ensemble/stage2/npy', save_final_pred = '/media/sdd/robot/guosai_ensemble/stage2/finalPred.npy'):
    file_names = [f for f in os.listdir(model_npy_dir) if f.endswith('.npy')]
    file_names.sort()

    data_list=[]
    for i, file_name in enumerate(file_names):
        # 读取当前文件
        df = np.load(os.path.join(model_npy_dir, file_name))
        data_list.append(df)

    df=pd.read_csv(vague_csv)

    data=[[0 for _ in range(155)] for _ in range(data_list[0].shape[0])]
    for i,data_i in enumerate(data_list):
        data=data_i*Rate[i]

    for _, row in df.iterrows():
        # 获取第2到21列的数据
        values = row[1:21].values.tolist()
        res_index = int(row.iloc[0])

        # 计算众数
        mode_result = stats.mode(values)
        mode_value = mode_result.mode # 得到众数

        first_index = values.index(mode_value)  # 找到第一个数值为众数的位置(此处是为了将模糊集的判别动作替换为更正后的动作)
        data[res_index] = data_list[first_index][res_index]
    
    np.save(save_final_pred,data)

# 7.在val上验证准确性
def get_acc(pred_npy_file = '/media/sdd/robot/guosai_ensemble/stage2/finalPred.npy', true_label_file = '/media/sdd/robot/wait2ensembleData/inter-val/val_label.npy'):
    label =np.load(true_label_file)
    pred = np.load(pred_npy_file).argmax(axis=1)
    correct = (pred == label).sum()
    total = len(label)
    print('Top1 Acc: {:.2f}%'.format(correct / total * 100))



if __name__ == "__main__":
    # 1.模型的推理npl转npy再转csv
    model_pkl2npy2csv()

    # 2.集成的推理结果文件获得类别csv
    pred_npy2csv()

    # # 3.将集成的预测结果与每个模型的预测结果相结合
    merge_predWithModel()

    # # 4.选择模糊集,输入集成的预测结果,返回索引列表
    get_vagueSet_index()

    # # 5.从合并的csv中找到模糊集,保存成单独的csv
    vagueSetIdx=[1, 2, 4, 8, 9, 15, 18, 19, 20, 21, 23, 30, 35, 36, 41, 44, 48, 50, 54, 63, 67, 75, 76, 79, 81, 83, 93, 94, 98, 100, 101, 102, 107, 108, 109, 110, 111, 115, 123, 124, 125, 126, 127, 131, 132, 134, 135, 137, 139, 141, 146, 148, 149, 151, 152, 156, 157, 158, 159, 167, 174, 176, 181, 182, 183, 184, 186, 187, 194, 199, 201, 204, 211, 216, 218, 221, 224, 229, 232, 234, 235, 237, 242, 
                246, 249, 252, 254, 255, 262, 264, 265, 268, 269, 271, 276, 281, 282, 284, 286, 289, 290, 291, 292, 295, 297, 299, 307, 309, 313, 315, 317, 322, 338, 340, 343, 345, 346, 349, 357, 358, 364, 365, 366, 368, 376, 378, 380, 383, 384, 385, 392, 395, 397, 399, 401, 404, 405, 407, 409, 412, 413, 417, 419, 426, 429, 434, 435, 441, 446, 447, 449, 454, 459, 462, 464, 466, 471, 472, 474, 475, 476, 482, 483, 487, 490, 491, 492, 495, 497, 502, 506, 508, 512, 514, 515, 520, 522, 524, 527, 531, 532, 533, 536, 537, 539, 540, 541, 542, 544, 548, 550, 551, 554, 555, 558, 559, 562, 565, 573, 574, 575, 576, 578, 580, 584, 587, 588, 589, 590, 597, 598, 602, 604, 608, 611, 612, 616, 617, 618, 619, 621, 623, 625, 628, 632, 634, 635, 640, 641, 644, 645, 647, 649, 657, 658, 661, 665, 667, 668, 669, 670, 672, 673, 674, 676, 685, 687, 690, 691, 692, 700, 702, 705, 706, 708, 709, 710, 715, 720, 724, 726, 728, 735, 738, 744, 748, 749, 751, 753, 754, 762, 768, 769, 770, 
                771, 772, 773, 775, 778, 783, 790, 792, 793, 796, 797, 800, 802, 804, 808, 810, 813, 814, 815, 816, 820, 821, 828, 830, 831, 832, 833, 841, 846, 847, 848, 855, 857, 860, 865, 866, 867, 870, 874, 875, 876, 881, 885, 888, 889, 896, 897, 898, 899, 903, 904, 906, 911, 912, 917, 923, 924, 930, 932, 937, 941, 946, 947, 948, 950, 958, 961, 964, 966, 968, 969, 972, 975, 981, 983, 984, 986, 989, 995, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1014, 1017, 1021, 1032, 1033, 1034, 1035, 1037, 1038, 1044, 1046, 1049, 1064, 1065, 1071, 1074, 1076, 1080, 1081, 1084, 1087, 1088, 
                1090, 1093, 1097, 1103, 1107, 1112, 1116, 1118, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1137, 1138, 1142, 1143, 1144, 1146, 1149, 1153, 1156, 1161, 1163, 1165, 1167, 1171, 1175, 1179, 1183, 1186, 1189, 1191, 1192, 1195, 1197, 1199, 1200, 1202, 1203, 1207, 1211, 1216, 1217, 1219, 1221, 1223, 1228, 1229, 1232, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1252, 1258, 1259, 1260, 1261, 1265, 1267, 1268, 1271, 1281, 1285, 1288, 1289, 1291, 1295, 1298, 1303, 1304, 1310, 1312, 1313, 1315, 1318, 1319, 1320, 1321, 1325, 1327, 1328, 1330, 1337, 1339, 1342, 1345, 1347, 1357, 1360, 1364, 1372, 1374, 1378, 1379, 1386, 1387, 1391, 1392, 1397, 1399, 1406, 1412, 1413, 1415, 1419, 1420, 1424, 1426, 1427, 1429, 1430, 1431, 1433, 1434, 1435, 1439, 1440, 1441, 1442, 1443, 1446, 1448, 1451, 1457, 1458, 1462, 1465, 1469, 1473, 1474, 1475, 1482, 1483, 1484, 1487, 1491, 1493, 1496, 1506, 1507, 1509, 1511, 1518, 1519, 1520, 1522, 1524, 1530, 1533, 1534, 1536, 1546, 1547, 1548, 1552, 1554, 1555, 1556, 1565, 1568, 1569, 1572, 1583, 1590, 1597, 1599, 1600, 1603, 1604, 1606, 1607, 1608, 1610, 1612, 1616, 1621, 1622, 1624, 1625, 1629, 1630, 
                1631, 1632, 1633, 1638, 1640, 1647, 1648, 1653, 1656, 1660, 1662, 1663, 1664, 1667, 1670, 1674, 1681, 1682, 1683, 1685, 1687, 1693, 1696, 1699, 1704, 1706, 1708, 1710, 1712, 1719, 1721, 1724, 1726, 1729, 1734, 1739, 1740, 1742, 1745, 1746, 1748, 1756, 1759, 1760, 1762, 1763, 1766, 1769, 1770, 1772, 1779, 1780, 1781, 1785, 1786, 1787, 1790, 1794, 1796, 1801, 1802, 1803, 1805, 1807, 1813, 1816, 1827, 1830, 1832, 1833, 1841, 1844, 1848, 1849, 1854, 1855, 1856, 1857, 1868, 1871, 1877, 1878, 1880, 1881, 1882, 1883, 1885, 1896, 1904, 1910, 1912, 1915, 1916, 1919, 1922, 1923, 1925, 1928, 1931, 1934, 1937, 1940, 1944, 1945, 1947, 1952, 1956, 1957, 1959, 1960, 1971, 1972, 1973, 1975, 1979, 1981, 1982, 1984, 1988, 1989, 1994, 1996, 2000, 2002, 2005, 2006, 2009, 2010, 2013, 2015, 2020, 2024, 2027, 2031, 2038, 2042, 2043, 2044, 2046, 2052, 2055, 2056, 2057, 2063, 2067, 2072, 2079, 2080, 2083, 2086, 2089, 2093, 2094, 2096, 2104, 2105, 2109, 2110, 2111, 2113, 2115, 2116, 2120, 2122, 2123, 2124, 2130, 2132, 2134, 2137, 2139, 2152, 2153, 2155, 2159, 2161, 2164, 2165, 2168, 2170, 2176, 2181, 2186, 2194, 2201, 2202, 2203, 2208, 2209, 2213, 2214, 
                2220, 2222, 2223, 2225, 2226, 2233, 2235, 2239, 2241, 2252, 2256, 2259, 2262, 2265, 2275, 2282, 2286, 2287, 2288, 2289, 2290, 2291, 2297, 2298, 2302, 2305, 2308, 2310, 2315, 2320, 2321, 2324, 2326, 2328, 2333, 2334, 2340, 2341, 2342, 2343, 2344, 2347, 2351, 2352, 2356, 2358, 2361, 2362, 2364, 2377, 2379, 2381, 2382, 2383, 2387, 2388, 2389, 2391, 2393, 2396, 2402, 2403, 2405, 2406, 2407, 2410, 2413, 2414, 2417, 2420, 2427, 2430, 2434, 2439, 2443, 2444, 2446, 2448, 2456, 2457, 2464, 2469, 2470, 2474, 2476, 2477, 2485, 2488, 2494, 2495, 2499, 2500, 2505, 2507, 2510, 2515, 2517, 2518, 2520, 2521, 2527, 2529, 2530, 2535, 2538, 2539, 2540, 2541, 2550, 2552, 2553, 2562, 2564, 2565, 2569, 2576, 2578, 2586, 2587, 2588, 2590, 2593, 2594, 2597, 2600, 2604, 2605, 2611, 2612, 2621, 2624, 2625, 2627, 2629, 2630, 2636, 2637, 2639, 2640, 2645, 2650, 2656, 2659, 2665, 2669, 2672, 2673, 2675, 2677, 2678, 2680, 2681, 2684, 2685, 2687, 2698, 2700, 2704, 2705, 2712, 2713, 2715, 2719, 2720, 2721, 2722, 2730, 2736, 2738, 2739, 2741, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2754, 2755, 2756, 2758, 2760, 2761, 2767, 2769, 2770, 2772, 2777, 2781, 2782, 
                2786, 2792, 2793, 2795, 2797, 2800, 2803, 2808, 2811, 2813, 2815, 2817, 2818, 2821, 2824, 2825, 2826, 2827, 2828, 2833, 2835, 2836, 2840, 2846, 2854, 2859, 2861, 2863, 2864, 2865, 2866, 2868, 2869, 2871, 2872, 2874, 2875, 2878, 2880, 2881, 2882, 2884, 2886, 2887, 2888, 2892, 2896, 2899, 2903, 2906, 2910, 2911, 2912, 2914, 2916, 2917, 2923, 2928, 2931, 2934, 2935, 2938, 2939, 2940, 2943, 2946, 2953, 2955, 2957, 2959, 2961, 2967, 2968, 2983, 2985, 2988, 2991, 2997, 2998, 3000, 3001, 3002, 3004, 3006, 3010, 3011, 3014, 3017, 3018, 3020, 3021, 3024, 3026, 3032, 3033, 3036, 3037, 3040, 3042, 3045, 3046, 3048, 3059, 3060, 3061, 3062, 3063, 3064, 3073, 3076, 3080, 3082, 3083, 3088, 3091, 3094, 3095, 3104, 3106, 3112, 3113, 3114, 3115, 3116, 3117, 3122, 3123, 3124, 3125, 3128, 3129, 3132, 3135, 3136, 3137, 3138, 3140, 3143, 3146, 3152, 3156, 3162, 3163, 3170, 3173, 3175, 3177, 3190, 3194, 3196, 3206, 3207, 3209, 3211, 3212, 3213, 3215, 3216, 3218, 3220, 3223, 3225, 3227, 3228, 3234, 3239, 3243, 3244, 3249, 3251, 3255, 3256, 3257, 3267, 3269, 3270, 3273, 3274, 3278, 3281, 3284, 3292, 3293, 3295, 3297, 3303, 3309, 3314, 3322, 3323, 3327, 
                3331, 3335, 3337, 3341, 3348, 3350, 3354, 3358, 3363, 3366, 3367, 3370, 3372, 3375, 3377, 3378, 3384, 3385, 3391, 3393, 3395, 3398, 3402, 3403, 3404, 3407, 3408, 3409, 3413, 3414, 3417, 3420, 3422, 3424, 3425, 3428, 3431, 3433, 3434, 3436, 3437, 3441, 3448, 3451, 3452, 3455, 3459, 3460, 3469, 3470, 3471, 3475, 3476, 3478, 3480, 3482, 3484, 3485, 3486, 3489, 3493, 3499, 3504, 3509, 3511, 3518, 3519, 3523, 3524, 3526, 3527, 3530, 3533, 3534, 3535, 3538, 3540, 3541, 3545, 3546, 3549, 3553, 3554, 3557, 3559, 3560, 3561, 3562, 3565, 3567, 3569, 3574, 3576, 3577, 3579, 3581, 3583, 3585, 3588, 3589, 3591, 3593, 3594, 3596, 3598, 3599, 3601, 3602, 3603, 3606, 3607, 3609, 3613, 3616, 3617, 3623, 3628, 3630, 3636, 3637, 3641, 3642, 3643, 3645, 3646, 3648, 3649, 3651, 3654, 3656, 3659, 3660, 3662, 3663, 3664, 3665, 3667, 3675, 3676, 3679, 3687, 3690, 3698, 3704, 3709, 3714, 3716, 3720, 3722, 3723, 3724, 3730, 3733, 3737, 3738, 3740, 3743, 3747, 3751, 3753, 3754, 3759, 3766, 3769, 3775, 3776, 3779, 3780, 3781, 3783, 3784, 3786, 3787, 3790, 3791, 3794, 3799, 3805, 3806, 3807, 3814, 3817, 3820, 3829, 3832, 3833, 3834, 3835, 3838, 3843, 3847, 
                3849, 3853, 3859, 3860, 3862, 3863, 3865, 3866, 3874, 3875, 3876, 3881, 3882, 3884, 3888, 3889, 3892, 3894, 3900, 3901, 3904, 3906, 3907, 3914, 3917, 3919, 3920, 3923, 3924, 3925, 3928, 3931, 3934, 3935, 3944, 3948, 3949, 3952, 3953, 3955, 3964, 3968, 3972, 3974, 3977, 3979, 3980, 3981, 3984, 3986, 3990, 3999, 4001, 4003, 4007, 4008, 4009, 4011, 4012, 4018, 4022, 4023, 4024, 4027, 4030, 4034, 4036, 4038, 4039, 4041, 4043, 4048, 4051, 4052, 4056, 4062, 4063, 4064, 4065, 4076, 4077, 4078, 4085, 4088, 4089, 4091, 4092, 4099, 4100, 4103, 4104, 4108, 4111, 4115, 4120, 4121, 4124, 4125, 4126, 4129, 4130, 4135, 4136, 4142, 4143, 4145, 4148, 4149, 4155, 4157, 4160, 4162, 4163, 4166, 4169, 4174, 4177, 4181, 4182, 4183, 4190, 4192, 4196, 4197, 4200, 4201, 4203, 4207, 4209, 4212, 4216, 4218, 4224, 4225, 4226, 4228, 4230, 4234, 4235, 4241, 4247, 4248, 4249, 4252, 4258, 4259, 4261, 4265, 4267, 4268, 4272, 4275, 4278, 4279, 4282, 4286, 4287, 4288, 4291, 4296, 4298, 4300]
    get_vagueSet_csv(idx_res=vagueSetIdx)

    # # 6.取众数,完成最后的输出
    Rate=[1634677399308.178, 0.0, 1451180025887.5386, 0.0, 586264313164.3572, 0.0, 420224497306.3636,0.0, 9380578811.602928, 690226575657.3226,
          84219393602.66, 0.0, 1035862531236.6625, 0.0, 319875314068.55896, 0.0, 1621190476181.186, 0.0, 3428914827973.899, 5092929975302.978 ]
    get_finalPred(Rate)

    # # 7.在val上验证准确性
    get_acc()